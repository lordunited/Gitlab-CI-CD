.stage_with_req:
  tags:
   - stage-1
  only:
    - changes
      app/requirements.txt

#  rules:
#    - if: $CI_COMMIT_BRANCH == "devops"
#    - changes:
#      - app/requirements.txt

.stage_no_req:
  tags:
  - stage-1
  only:
  - main


stages:
  - build_no_req
  - deploy_no_req
  - build_with_req
  - deploy_with_req
  - test

run_unitest:
  when: on_success
  stage: test
  extends: .stage_no_req
  before_script: 
    - docker compose -f docker-compose-test.yml up -d 
  script:
    - docker compose -f docker compose-test.yml exec -it ptoc "python manage.py pytest"
  after_script:
    - docker compose -f docker-compose-test.yml down -v 

build_no_req:
  stage: build_no_req
  extends: .stage_no_req
  script:
    - docker build . -t registry.gitlab.com/**/ptoc:$CI_PIPELINE_ID
  after_script:
    - docker push registry.gitlab.com/**/ptoc:$CI_PIPELINE_ID

build_with_req:
  stage: build_with_req
  extends: .stage_with_req
  script:
    - docker build -f Docker_req -t registry.gitlab.com/***/ptoc:$CI_PIPELINE_ID .
  after_script:
    - docker push registry.gitlab.com/**/ptoc:$CI_PIPELINE_ID


deploy_no_req:
  stage: deploy_no_req
  extends: .stage_no_req
  script:
    - "sed -i 's/IMAGE_VERSION.*/IMAGE_VERSION=$CI_PIPELINE_ID/' /opt/ptoc/.env-compose"
  after_script:
    - docker compose --env-file /opt/ptoc/.env-compose -f /opt/ptoc/docker-compose.yml  up -d


deploy_with_req:
  stage: deploy_with_req
  extends: .stage_with_req
  script:
    - "sed -i 's/IMAGE_VERSION.*/IMAGE_VERSION=$CI_PIPELINE_ID/' /opt/ptoc/.env-compose"
  after_script:
    - docker compose -f /opt/ptoc/docker-compose.yml  up -d

